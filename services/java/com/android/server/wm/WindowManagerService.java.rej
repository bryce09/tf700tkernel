--- frameworks/base/services/java/com/android/server/wm/WindowManagerService.java
+++ frameworks/base/services/java/com/android/server/wm/WindowManagerService.java
@@ -27,11 +27,16 @@
 import static android.view.WindowManager.LayoutParams.LAST_APPLICATION_WINDOW;
 import static android.view.WindowManager.LayoutParams.LAST_SUB_WINDOW;
 import static android.view.WindowManager.LayoutParams.TYPE_APPLICATION_STARTING;
+import static android.view.WindowManager.LayoutParams.TYPE_APPLICATION_PANEL;
 import static android.view.WindowManager.LayoutParams.TYPE_BASE_APPLICATION;
 import static android.view.WindowManager.LayoutParams.TYPE_DREAM;
 import static android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD;
 import static android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD_DIALOG;
 import static android.view.WindowManager.LayoutParams.TYPE_WALLPAPER;
+import static android.view.WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN;
+import static android.view.WindowManager.LayoutParams.FLAG_FULLSCREEN;
+import static android.view.WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR;
+import static android.view.WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS;
 
 import com.android.internal.app.IBatteryStats;
 import com.android.internal.policy.PolicyManager;
@@ -156,29 +166,66 @@
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Locale;
+
+import org.xmlpull.v1.XmlPullParser;
+import org.xmlpull.v1.XmlPullParserException;
 
 /** {@hide} */
 public class WindowManagerService extends IWindowManager.Stub
         implements Watchdog.Monitor, WindowManagerPolicy.WindowManagerFuncs {
     static final String TAG = "WindowManager";
+    /**
+     * Author: Onskreen
+     * Date: 24/01/2011
+     *
+     * Debug flag for window panel positioning
+     */
+    static final boolean DEBUG_WP_POSITIONS = true;
+
+
+    /**
+     * Author: Onskreen
+     * Date: 24/01/2011
+     *
+     * Debug flag for window panel groupings
+     */
+    static final boolean DEBUG_WP_GROUPING = true;
+
+    /**
+     * Author: Onskreen
+     * Date: 26/12/2011
+     *
+     * Debug flag for window panel groupings
+     */
+    static final boolean DEBUG_WP_CONFIG = false;
+
+    /**
+     * Author: Onskreen
+     * Date: 24/01/2011
+     *
+     * Debug flag for cornerstone specific logic
+     */
+    static final boolean DEBUG_CORNERSTONE = true;
+
     static final boolean DEBUG = false;
-    static final boolean DEBUG_ADD_REMOVE = false;
-    static final boolean DEBUG_FOCUS = false;
+    static final boolean DEBUG_ADD_REMOVE = true;
+    static final boolean DEBUG_FOCUS = true;
     static final boolean DEBUG_ANIM = false;
-    static final boolean DEBUG_LAYOUT = false;
-    static final boolean DEBUG_RESIZE = false;
+    static final boolean DEBUG_LAYOUT = true;
+    static final boolean DEBUG_RESIZE = true;
     static final boolean DEBUG_LAYERS = false;
     static final boolean DEBUG_INPUT = false;
     static final boolean DEBUG_INPUT_METHOD = false;
-    static final boolean DEBUG_VISIBILITY = false;
-    static final boolean DEBUG_WINDOW_MOVEMENT = false;
-    static final boolean DEBUG_TOKEN_MOVEMENT = false;
+    static final boolean DEBUG_VISIBILITY = true;
+    static final boolean DEBUG_WINDOW_MOVEMENT = true;
+    static final boolean DEBUG_TOKEN_MOVEMENT = true;
     static final boolean DEBUG_ORIENTATION = false;
     static final boolean DEBUG_APP_ORIENTATION = false;
     static final boolean DEBUG_CONFIGURATION = false;
     static final boolean DEBUG_APP_TRANSITIONS = false;
     static final boolean DEBUG_STARTING_WINDOW = false;
-    static final boolean DEBUG_REORDER = false;
+    static final boolean DEBUG_REORDER = true;
     static final boolean DEBUG_WALLPAPER = false;
     static final boolean DEBUG_DRAG = false;
     static final boolean DEBUG_SCREEN_ON = false;
@@ -679,7 +738,16 @@
                     final ArrayList<WindowStateAnimator> winAnimators = mAnimator.mWinAnimators;
                     winAnimators.clear();
                     final int N = mWindows.size();
-                    for (int i = 0; i < N; i++) {
+                    /**
+                     * Author: Onskreen
+                     * Date: 11/19/2012
+                     *
+                     * This method triggers animation by WindowStateAnimator.animate() method.
+                     * The loop must start from mWindows.size()-1 to 0 to recify the
+                     * Z-order list of Windows. Hence, animation is applied in the order
+                     * from top to bottom Windows.
+                     */
+                    for (int i = N-1; i >= 0; i--) {
                         final WindowStateAnimator winAnimator = mWindows.get(i).mWinAnimator;
                         if (winAnimator.mSurface != null) {
                             winAnimators.add(winAnimator);
@@ -1950,7 +2320,14 @@
         mInnerFields.mWallpaperMayChange = false;
         int changed = 0;
 
-        final int dw = mAppDisplayWidth;
+        /**
+         * Author: Onskreen
+         * Date: 11/14/2012
+         *
+         * Cornerstone keeps the wallpaper window at always bottom of the Z-order
+         * list and to do that we have to comment the below implementation.
+         */
+        /*final int dw = mAppDisplayWidth;
         final int dh = mAppDisplayHeight;
 
         // First find top-most window that has asked to be on top of the
@@ -3241,7 +3692,6 @@
                     }
                 } catch (Exception e) {
                     mInputMonitor.updateInputWindowsLw(true /*force*/);
-                    
                     Slog.w(TAG, "Exception thrown when creating surface for client "
                              + client + " (" + win.mAttrs.getTitle() + ")",
                              e);
@@ -4228,9 +4969,35 @@
         mAnimatingAppTokens.add(mAnimatingAppTokens.indexOf(aboveAnchor), wtoken);
     }
 
+    /**
+     * Author: Onskreen
+     * Date: 24/01/2011
+     *
+     * Rather than change the IWindowManager interface, left this as a stub and put its implementation
+     * into the overridden method below.
+     */
     @Override
     public void addAppToken(int addPos, IApplicationToken token,
             int groupId, int requestedOrientation, boolean fullscreen) {
+
+    }
+
+    /**
+     * Author: Onskreen
+     * Date: 24/01/2011
+     *
+     * Overloaded version which also takes as cornerstone specific parameters:
+     * - inMainPanel - boolean indicating if the app should be in the main panel.
+     * - isCornerstone - boolean indicating if the token is the cornerstone
+     * - cornerstonePanelIndex - int indicating which cornerstone panel. -1 indicates
+     * invalid value (not a cornerstone panel)
+     */
+
+    public void addAppToken(int addPos, IApplicationToken token,
+            int groupId, int requestedOrientation, boolean fullscreen,
+            boolean inMainPanel,
+            boolean isCornerstone,
+            int cornerstonePanelIndex) {
         if (!checkCallingPermission(android.Manifest.permission.MANAGE_APP_TOKENS,
                 "addAppToken()")) {
             throw new SecurityException("Requires MANAGE_APP_TOKENS permission");
@@ -4261,10 +5028,183 @@
             wtoken.groupId = groupId;
             wtoken.appFullscreen = fullscreen;
             wtoken.requestedOrientation = requestedOrientation;
+
+
+            /**
+             * Author: Onskreen
+             * Date: 11/02/2011
+             *
+             * Set the cornerstone flag in the token
+             */
+            wtoken.isCornerstone = isCornerstone;
+
+            /**
+             * Author: Onskreen
+             * Date: 12/01/2011
+             *
+             * Add the new apptoken to an existing WindowPanel, or create a new one
+             * for that panel if required.
+             */
+            WindowPanel wpToAddTo = null;
+            //Main Panel
+            if(inMainPanel) {
+                if (DEBUG_WP_GROUPING) {
+                    Log.w(TAG, "Trying to add: " + wtoken + " to Main Panel");
+                }
+                for (int k = 0; k < mWindowPanels.size(); k++) {
+                    WindowPanel wp = mWindowPanels.get(k);
+                    if(wp.isMainPanel()) {
+                        wpToAddTo = wp;
+                        if (DEBUG_WP_GROUPING) {
+                            Log.w(TAG, "\tFound matching Window Panel" + wp);
+                        }
+                        break;
+                    }
+                }
+            } else if(isCornerstone) {
+                //Cornerstone
+                if (DEBUG_WP_GROUPING) {
+                    Log.w(TAG, "Trying to add: " + wtoken + " to Cornerstone");
+                }
+                for (int k = 0; k < mWindowPanels.size(); k++) {
+                    WindowPanel wp = mWindowPanels.get(k);
+                    if(wp.isCornerstone()) {
+                        wpToAddTo = wp;
+                        if (DEBUG_WP_GROUPING) {
+                            Log.w(TAG, "\tFound matching Window Panel" + wp);
+                        }
+                        break;
+                    }
+                }
+            } else {
+                //Cornerstone Panel
+                if (DEBUG_WP_GROUPING) {
+                    Log.w(TAG, "Trying to add: " + wtoken + " to Cornerstone Panel: " + cornerstonePanelIndex);
+                }
+                for (int k = 0; k < mWindowPanels.size(); k++) {
+                    WindowPanel wp = mWindowPanels.get(k);
+                    if(wp.isCornerstonePanel() && wp.mCornerstonePanelIndex==cornerstonePanelIndex) {
+                        wpToAddTo = wp;
+                        if (DEBUG_WP_GROUPING) {
+                            Log.w(TAG, "\tFound matching Window Panel" + wp);
+                        }
+                        break;
+                    }
+                }
+            }
+
+            //Add to existing Window Panel
+            if(wpToAddTo != null) {
+                if (DEBUG_WP_GROUPING) {
+                    Log.w(TAG, "\tAdding to Window Panel");
+                }
+                wpToAddTo.addGroupId(wtoken.groupId);
+
+            } else {
+                //Create new Window Panel
+                WindowPanel newWP = new WindowPanel();
+                newWP.setName(wtoken.stringName);
+                newWP.addGroupId(wtoken.groupId);
+                mWindowPanels.add(newWP);
+
+                if(inMainPanel) {
+                    if (DEBUG_WP_GROUPING) {
+                        Log.w(TAG, "\tCreating new Window Panel: Main Panel");
+                    }
+                    newWP.setInMainPanel(inMainPanel);
+                    newWP.setIsCornerstonePanel(false);
+                } else if(isCornerstone) {
+                    if (DEBUG_WP_GROUPING) {
+                        Log.w(TAG, "\tCreating new Window Panel: Cornerstone");
+                    }
+                    newWP.setInMainPanel(inMainPanel);
+                    newWP.setIsCornerstonePanel(false);
+                } else {
+                    if (DEBUG_WP_GROUPING) {
+                        Log.w(TAG, "\tCreating new Window Panel: Cornerstone Panel: " + cornerstonePanelIndex);
+                    }
+                    newWP.setInMainPanel(inMainPanel);
+                    newWP.setIsCornerstonePanel(true);
+                    newWP.mCornerstonePanelIndex = cornerstonePanelIndex;
+                }
+            }
+
+        /**
+         * Author: Onskreen
+         * Date: 01/02/2010
+         *
+         * Translate the addPos to be appropriate for the WMS. The addPos is given by the ActivityStack
+         * based on its known tasks, however those could be in variable z-order in mWindows.
+         *
+         * TO CONSIDER:
+         * - If the apptoken wanted to be the top apptoken in its stack, should it be placed
+         * at the top of mapptokens, regardless of where the last activity of it's stack is in
+         * mAppTokens?
+         */
+        int newAddPos = addPos; 		//Translated addPos
+        if(DEBUG_CORNERSTONE) {
+            Log.v(TAG, "State of mAppTokens before calculating where token should be added:");
+            for(int k=0; k<mAppTokens.size(); k++) {
+                Log.v(TAG, k + ": " + mAppTokens.get(k));
+            }
+        }
+
+        WindowPanel targetWP = null;
+        for(int k=0; k<mWindowPanels.size(); k++) {
+            WindowPanel wp = mWindowPanels.get(k);
+            //Found the window panel which contains the token being added. Use this version of contains() because
+            //the appwindowtoken has not been added to internal data structures yet so other version will fail
+            if(wp.contains(wtoken.groupId)) {
+                targetWP = wp;
+                break;
+            }
+        }
+
+        //Cornerstone
+        if(wtoken.isCornerstone) {
+            if(DEBUG_CORNERSTONE) {
+                Log.v(TAG, "Token is cornerstone, place at bottom.");
+            }
+            newAddPos = 0;
+        } else {
+			//For any other ActivityStack count the spot to place the token
+			int numAppTokensInPanel = 0;
+			boolean cornerstoneFound = false;
+			for(int i=0; i<mAppTokens.size(); i++) {
+				if(targetWP.contains(mAppTokens.get(i).groupId)) {
+					numAppTokensInPanel++;
+					if(DEBUG_CORNERSTONE) {
+						Log.v(TAG, "Found other token of same wp: " + mAppTokens.get(i));
+					}
+				}
+				if(mAppTokens.get(i).isCornerstone) {
+					cornerstoneFound = true;
+					if(DEBUG_CORNERSTONE) {
+						Log.v(TAG, "Found cornerstone: " + mAppTokens.get(i));
+					}
+				}
+				if(addPos == 0 && numAppTokensInPanel==1) {
+					newAddPos = i;
+					break;
+				} else if(addPos>0 && addPos==numAppTokensInPanel) {
+					newAddPos = i;
+					break;
+				}
+		}
+		newAddPos = mAppTokens.size();
+/*		//If went through whole list put at bottom (taking into account cornerstone)
+		if(cornerstoneFound) {
+			newAddPos = addPos + 1;
+		} else {
+			newAddPos = addPos;
+		}
+*/
+        }
+
             if (DEBUG_TOKEN_MOVEMENT || DEBUG_ADD_REMOVE) Slog.v(TAG, "addAppToken: " + wtoken
-                    + " at " + addPos);
-            mAppTokens.add(addPos, wtoken);
-            addAppTokenToAnimating(addPos, wtoken);
+                    + " at " + newAddPos);
+            mAppTokens.add(newAddPos, wtoken);
+            addAppTokenToAnimating(newAddPos, wtoken);
             mTokenMap.put(token.asBinder(), wtoken);
 
             // Application tokens start out hidden.
